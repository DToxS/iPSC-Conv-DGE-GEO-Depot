//
//  SAMAlignmentCounterArguments.hpp
//  SAM-Alignment-Counter
//
//  Created by Granville Xiong on 4/1/18.
//  Copyright Â© 2018 Granville Xiong. All rights reserved.
//

#ifndef SAMAlignmentCounterArguments_hpp
#define SAMAlignmentCounterArguments_hpp

#include <vector>
#include <utk/ProgramArguments.hpp>

/// \brief SAMAlignmentCounterArguments checks input arguments for entire program
/// This class takes input arguments of main function, checks their validity,
/// and store them in corresponding member variables.
class SAMAlignmentCounterArguments : public utk::ProgramArguments
{
public:

    /// \brief Input SAM file.
    /// The input SAM file is generated by the report mode of featureCounts on
    /// the alignment results from STAR aligner.
    std::string input_sam_file_path;

    /// \brief Output SAM file.
    /// The output SAM file contains the alignment lines for uniquely aligned
    /// sequences tagged with unique UMI barcodes for each gene.
    std::string output_sam_file_path;

    /// Indicator for parsing header line.
    bool parse_header_line {false};

    /// Indicator for parsing the top structure of each field of header line.
    bool parse_header_fields {false};

    /// Indicator for parsing the tag and value attributes of each field of
    /// header line.
    bool parse_header_fields_attribs {false};

    /// Indicator for parsing the top structure of alignment line.
    bool parse_align_line {false};

    /// Indicator for parsing all mandatory fields of alignment line according
    /// to the SAM standard.
    bool parse_mand_align_fields {false};

    /// Indicator for parsing the top structure of each optional field of
    /// alignment line.
    bool parse_opt_align_fields {false};

    /// Indicator for parsing the tag, type, and value attributes of each
    /// optional field of alignment line.
    bool parse_opt_align_fields_attribs {false};

    /// \brief Indicator for using a list of preferred optional fields.
    /// These preferred optional fields are used to improve the efficiency of
    /// processing the input SAM file generated by STAR and featureCounts.
    bool use_pref_opt_fields {false};

    /// Type of line delimiter of SAM file.
    std::string sam_file_line_delim_type;

    /// \brief The tags of preferred optional fields to be parsed.
    /// If not empty, only these preferred optional fields will be parsed while
    /// other fileds will be skipped.
    std::vector<std::string> pref_opt_fields_tags;

private:

    /// \brief The tags of preset preferred optional fields to be parsed.
    /// If not empty, only these preferred optional fields will be parsed while
    /// other fileds will be skipped.
    const std::vector<std::string> preset_pref_opt_fields_tags;

protected:

    /// \brief Help messages on program usage
    virtual void helpMessage() override;

    /// \brief Assign mandatory input arguments
    virtual void assignMandatoryArguments() override;

    /// \brief Assign optional input arguments
    virtual void assignOptionalArguments() override;

    /// \brief Validate input arguments
    virtual void validateArguments() override;

public:

    /// \brief Retrieve input arguments
    SAMAlignmentCounterArguments(int argc, const char** argv);
};

#endif /* SAMAlignmentCounterArguments_hpp */
