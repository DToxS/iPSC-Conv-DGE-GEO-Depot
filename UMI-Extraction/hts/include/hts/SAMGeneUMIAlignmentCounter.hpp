//
//  SAMGeneUMIAlignmentCounter.hpp
//  High-Throughput-Sequencing
//
//  Created by Yuguang Xiong on 3/30/18.
//  Copyright Â© 2018 Granville Xiong. All rights reserved.
//

#ifndef SAMGeneUMIAlignmentCounter_hpp
#define SAMGeneUMIAlignmentCounter_hpp

#include <unordered_set>
#include <string>
#include "SAMAlignmentCounter.hpp"
#include "SAMHeaderDataLine.hpp"
#include "SAMHeaderCommentLine.hpp"
#include "SAMCompositedDGEIlluminaSTARFeatureCountsAlignmentLine.hpp"

namespace hts
{

/// \brief Count aligned FASTQ sequences using gene and UMI information.
/// This class uses the target gene and UMI barcode contained in the SAM
/// alignment file of composite 3'-DGE Illumina FASTQ sequence to find the
/// uniquely aligned sequences tagged with distinct UMI barcodes for each gene.
/// The information of target gene is generated by the featureCounts program.
///
/// Background
///
/// With the single-molecule transcriptomic technique, each mRNA molecule
/// transcribed from the same gene is assumed to be tagged with distinct
/// 10-nt UMI barcode since the number of possibly different UMI barcodes is
/// much larger than the number of mRNA molecules transcribed from a gene.
/// Therefore statistically speaking, each mRNA molecule will be tagged with
/// different UMI barcode. The amplification effect of PCR technique thus
/// creates multiple mRNA molecules transcribed from the same gene are tagged
/// with the same UMI barcode. So, by identifying and removing the sequences
/// aligned to the same gene and also tagged with the same UMI barcode, the
/// unwanted amplification side effect from PCR can be removed, such that the
/// remaining uniquely aligned sequences of the same gene reliably reflect
/// the transcription level of that gene.
///
/// Implementation
///
/// This class uses multiple alignment metrics contained in SAM alignment file
/// to determine the uniqueness of a given sequence using a combination of
/// target gene and UMI barcode.
///
/// Note: This class needs the optional fields of alignment status and
/// target features contained the report SAM file generated by featureCounts
/// program.
class SAMGeneUMIAlignmentCounter : public SAMAlignmentCounter<SAMHeaderDataLine, SAMHeaderCommentLine, SAMCompositedDGEIlluminaSTARFeatureCountsAlignmentLine>
{
public:

    using SAMAlignmentCounterInst = SAMAlignmentCounter<SAMHeaderDataLine, SAMHeaderCommentLine, SAMCompositedDGEIlluminaSTARFeatureCountsAlignmentLine>;

private:

    /// \brief The gene-UMI pool for unique gene-UMI combinations.
    /// The gene-UMI pool contains a unique set of the combinations of target
    /// gene and UMI barcode.
    std::unordered_set<std::string> gene_umi_pool;

public:

    SAMGeneUMIAlignmentCounter();

    virtual ~SAMGeneUMIAlignmentCounter() noexcept;

    /// Determine if a sequence is uniquely aligned to a gene and also tagged
    /// with distinct UMI barcode among all the sequences aligned to that gene.
    /// An auxiliary count is used to indicate an unique alignment.
    virtual bool countAlignmentLine(const SAMCompositedDGEIlluminaSTARFeatureCountsAlignmentLine& alignment_line, bool& aux_count) override;
};

}

#endif /* SAMGeneUMIAlignmentCounter_hpp */
