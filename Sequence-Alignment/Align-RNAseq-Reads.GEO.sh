#!/usr/bin/env bash
# This script invokes STAR to align mRNA sequences (in fastq.gz format) to
# UCSC's reference genome library (downloaded from UCSC's Genome Browser).

#
# Function definitions
#

# Print help message.
help_msg ()
{
	echo "Usage: $1 [Seq Dir] [Align Dir] [Ref Index Dir] [Seq File Suffix] [Number of Threads]" 1>&2
	echo "       [Seq Dir]: the directory for mRNA-seq data files" 1>&2
	echo "       [Align Dir]: the directory for sequence alignment files" 1>&2
	echo "       [Ref Index Dir]: the STAR index directory for human genome reference library" 1>&2
	echo "       [Seq File Suffix]: the suffix of mRNA-seq data file name [Default: fastq.gz]" 1>&2
	echo "       [Number of Threads]: the number of parallel threads to use [Default: 4]" 1>&2
	return 1
}

cpus ()
{
	local N_THREADS_MAX="$1"
	if [ "${N_THREADS_MAX}" -gt 0 ]; then
		local CPUS=`getconf _NPROCESSORS_ONLN 2>/dev/null`
		[ -z "$CPUS" ] && CPUS=`getconf NPROCESSORS_ONLN`
		[ -z "$CPUS" ] && CPUS=`ksh93 -c 'getconf NPROCESSORS_ONLN'`
		[ -z "$CPUS" ] && CPUS=1
		[ "$CPUS" -gt "${N_THREADS_MAX}" ] && CPUS="${N_THREADS_MAX}"
		echo "${CPUS}"
		return 0
	else
		echo "ERROR: The number of threads must be greater than zero!" 1>&2
		return 1
	fi
}

check_seq_file_suffix ()
{
	local SEQ_SUFFIX="$(echo "$1" | tr "[:upper:]" "[:lower:]")"
	if [ "${SEQ_SUFFIX}" != "fastq" ] && [ "${SEQ_SUFFIX}" != "fastq.gz" ] && [ "${SEQ_SUFFIX}" != "fq" ] && [ "${SEQ_SUFFIX}" != "fq.gz" ]; then
		echo "ERROR: The suffix of sequence file name must be one of: fastq, fastq.gz, fq, and fq.gz (case insensitive)!" 1>&2
		return 1
	else
		return 0
	fi
}

check_dir ()
{
	if [ ! -d "$1" ]; then
		echo "ERROR: Directory "$1" is not found!" 1>&2
		return 1
	else
		return 0
	fi
}

#
# Main program
#

# Initialize error code.
EXIT_CODE=0

# Obtain and check program path.
PROG_PATH="$0"
PROG_DIR="$(dirname "${PROG_PATH}")"
PROG_NAME="$(basename "${PROG_PATH}")"

# Process input arguments.
if [ ${EXIT_CODE} -eq 0 ]; then
	# Specify the range of the number of input arguments.
	N_ARGS_MIN=3
	N_ARGS_MAX=5
	# Check and assign input arguments.
	if [ $# -ge "${N_ARGS_MIN}" ] && [ $# -le "${N_ARGS_MAX}" ]; then
		SEQ_FILE_SUFFIX="fastq.gz"
		THREAD_NUMBER=4
		if [ ${EXIT_CODE} -eq 0 ] && [ $# -ge $((N_ARGS_MIN)) ] && [ "${N_ARGS_MIN}" -ge 1 ]; then
			SEQ_DIR="${@:((N_ARGS_MIN-2)):1}"
			ALIGN_DIR="${@:((N_ARGS_MIN-1)):1}"
			REF_INDEX_DIR="${@:((N_ARGS_MIN)):1}"
			check_dir "${SEQ_DIR}" && \
				check_dir "${ALIGN_DIR}" && \
				check_dir "${REF_INDEX_DIR}"
			EXIT_CODE=$?
		fi
		if [ ${EXIT_CODE} -eq 0 ] && [ $# -ge $((N_ARGS_MIN+1)) ]; then
			SEQ_FILE_SUFFIX="${@:((N_ARGS_MIN+1)):1}"
			check_seq_file_suffix "${SEQ_FILE_SUFFIX}"
			EXIT_CODE=$?
		fi
		if [ ${EXIT_CODE} -eq 0 ] && [ $# -ge $((N_ARGS_MIN+2)) ]; then
			THREAD_NUMBER="$(cpus "${@:((N_ARGS_MIN+2)):1}")"
			EXIT_CODE=$?
		fi
	else
		# Print help message for the wrong number of input arguments.
		help_msg "${PROG_NAME}"
		EXIT_CODE=$?
	fi
fi

# Get a list of all sequence files.
if [ ${EXIT_CODE} -eq 0 ]; then
	# Retrieve the names of a set of mRNA-seq data files.
	readarray -t -d $'\0' SEQ_FILES < <(find -L "${SEQ_DIR}" -maxdepth 1 -type f -name "*\.${SEQ_FILE_SUFFIX}" -print0)
	EXIT_CODE=$?
	if [ ${EXIT_CODE} -eq 0 ]; then
		N_SEQ_FILES="${#SEQ_FILES[@]}"
		if [ ${N_SEQ_FILES} -ge 1 ]; then
			# Generate a list of alignment file names.
			ALIGN_FILE_TYPE="bam"
			ALIGN_FILES=()
			for SEQ_FILE in "${SEQ_FILES[@]}"; do
				SEQ_FILE_NAME="$(basename "${SEQ_FILE}")"
				ALIGN_FILE_NAME="$(echo ${SEQ_FILE_NAME} | sed "s/${SEQ_FILE_SUFFIX}$/${ALIGN_FILE_TYPE}/g")"
				ALIGN_FILE="${ALIGN_DIR}/${ALIGN_FILE_NAME}"
				ALIGN_FILES+=("${ALIGN_FILE}")
			done
			# Get the suffix of sequence file name
			FILE_SUFFIX="$(echo "${SEQ_FILE_SUFFIX:(-2)}" | tr "[:upper:]" "[:lower:]")"
			# Set the default name of alignment output file generated by STAR.
			STAR_ALIGN_FILE="Aligned.out.${ALIGN_FILE_TYPE}"
			# Start aligning sequence to reference library using STAR.
			((IDX=0))
			for SEQ_FILE in "${SEQ_FILES[@]}"; do
				echo "STAR is aligning ${SEQ_FILE} to ${REF_INDEX_DIR} ..."
				STAR \
					--runMode alignReads \
					--runThreadN "${THREAD_NUMBER}" \
					--readFilesIn "${SEQ_FILE}" \
					$([ "${FILE_SUFFIX}" == "gz" ] && echo "--readFilesCommand \"gzip -dc\"" || :) \
					--genomeDir "${REF_INDEX_DIR}" \
					--outFileNamePrefix "${ALIGN_DIR}/" \
					$([ "${ALIGN_FILE_TYPE}" == "sam" ] && echo "--outSAMtype SAM" || echo "--outSAMtype BAM Unsorted") \
					--outFilterMultimapNmax 10 \
					--outFilterMismatchNmax 10 \
					--outMultimapperOrder Old_2.4 \
					--outSAMunmapped Within \
					--outSAMattributes NH HI NM MD AS nM jI jM
				EXIT_CODE=$?
				# Rename generated alignment file.
				if [ ${EXIT_CODE} -eq 0 ]; then
					# Rename generated alignment file.
					mv "${ALIGN_DIR}/${STAR_ALIGN_FILE}" "${ALIGN_FILES[${IDX}]}"
					# Clean up log files.
					rm ${ALIGN_DIR}/Log*out ${ALIGN_DIR}/SJ.out.tab
					# Increase the index.
					((IDX+=1))
				else
					# Quit if error occurs.
					break
				fi
			done
		else
			echo "ERROR: No sequence file is found in ${SEQ_DIR}!" 1>&2
			EXIT_CODE=1
		fi
	fi
fi

# Exit with error code.
exit ${EXIT_CODE}
